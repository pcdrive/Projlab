package controller;

import data.Data;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.RowConstraints;
import server.PalyaAdat;
import sokoban.Navigator;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Random;

/**
 * A KillerSokoban egy jatek, ahol a jatekos egy raktari munkast alakit.
 * A cel, hogy minden mas jatekosnal tobb megjelolt ladat tolj a helyere.
 *
 * @author Horvath Gergo
 * @author Mocsari Andras
 * @author Zsiros Balint
 * @author Bottlik Judit
 * @author Holub Csongor
 * @version 1.0
 * @since 2018.04.29.
 */
public class ServerController {
    @FXML
    public TextField textfield_jatekos1nev;
    @FXML
    public TextField textfield_jatekos2nev;
    @FXML
    public TextField textfield_port;
    @FXML
    public Button button_megse;
    @FXML
    public Button button_start;
    @FXML
    public ComboBox<String> combobox_palyavalaszto;
    @FXML
    public GridPane lowergridpane_preview;
    @FXML
    public GridPane uppergridpane_preview;

    private Image CelhelyImg;
    private Image DobozImg;
    private Image FalImg;
    private Image JeloltDImg;
    private Image KapcsoloImg;
    private Image LyukImg;
    private Image MezImg;
    private Image OlajImg;
    private Image MezOlajImg;
    private Image UresMezoImg;
    private ArrayList<Image> PlayerImgs = new ArrayList<Image>();
    private ArrayList<Integer> usedplayers = new ArrayList<Integer>();
    
    public ServerController() 
    {
        CelhelyImg = new Image("/data/resources/drawable/celhely.png");
        DobozImg = new Image("/data/resources/drawable/doboz.png");
        FalImg = new Image("/data/resources/drawable/fal.png");
        JeloltDImg = new Image("/data/resources/drawable/jeloltdoboz.png");
        KapcsoloImg = new Image("/data/resources/drawable/kapcsolo.png");
        LyukImg = new Image("/data/resources/drawable/lyuk.png");
        MezImg = new Image("/data/resources/drawable/mez.png");
        MezOlajImg = new Image("/data/resources/drawable/mezolaj.png");
        OlajImg = new Image("/data/resources/drawable/olaj.png");
        UresMezoImg = new Image("/data/resources/drawable/uresmezo.png");
        fillPlayerImages();
    }
    
    public void onButtonDownAction(ActionEvent actionEvent) {
        if (actionEvent.getSource() == button_start) {
            if (textfield_jatekos1nev.getText().isEmpty() || textfield_jatekos2nev.getText().isEmpty() || textfield_port.getText().isEmpty()) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Hi√°nyos adatok!");
                alert.setHeaderText(null);
                alert.setContentText("Nem adott meg minden adatot!");
                alert.show();
                return;
            } else {
                //valamit csinaljon....
            }
        } else if (actionEvent.getSource() == button_megse) {
            try {
                Parent root = FXMLLoader.load(getClass().getResource("/data/resources/layout/MenuView.fxml"));
                Navigator.navigate(root);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    @FXML
    public void initialize() {
        combobox_palyavalaszto.setItems(Data.jatek.getPalyaLista());
        combobox_palyavalaszto.valueProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
            	usedplayers.clear();
            	disposeGrid();
            	
            	int[] IDs = Data.jatek.getIDLista(newValue);
            	
            	setGrid();
            	
            	fillGrid();
            }
        });
    }
    

    private void fillPlayerImages()
    {
    	if (PlayerImgs==null) 
    	{
    		PlayerImgs = new ArrayList<Image>();
    	}
    	
    	for (int i=0;i<21;i++) 
    	{
    		PlayerImgs.add(new Image("/data/resources/drawable/jatekosok/jo"+i+".png"));
    	}
    }
    
    private void setGrid() 
    {
    	for (int i=0;i<Data.PalyaX;i++) 
    	{
            ColumnConstraints row = new ColumnConstraints();
            lowergridpane_preview.getColumnConstraints().add(row);
            row = new ColumnConstraints();
            uppergridpane_preview.getColumnConstraints().add(row);
    	}

    	for (int i=0;i<Data.PalyaY;i++) 
    	{
    		RowConstraints row = new RowConstraints();
            lowergridpane_preview.getRowConstraints().add(row);
    		row = new RowConstraints();
            uppergridpane_preview.getRowConstraints().add(row);
    	}
    }
    
    private void fillGrid() 
    {
    	int[] IDs = Data.PA.palya;
    	
    	for (int x=0; x<Data.PalyaX;x++) 
    	{
        	for (int y=0; y<Data.PalyaY;y++) 
        	{
        		ImageView New = new ImageView();
        		int CellWidth = lowergridpane_preview.widthProperty().intValue()/Data.PalyaX;
        		int ColumnHeight = lowergridpane_preview.heightProperty().intValue()/Data.PalyaY;
        		
        		switch ((int)(IDs[x+y*Data.PalyaX]%10000/1000)) 
        		{
        			case 0:{ New = new ImageView(UresMezoImg); }break;
        			case 1:{ New = new ImageView(FalImg); }break;
        			case 2:{ New = new ImageView(LyukImg); }break;
        			case 3:{ if ((int)(IDs[x+y*10]%100000/100)==0) {New = new ImageView(CelhelyImg);} else {New = new ImageView(UresMezoImg);} }break;
        			case 4:{ if ((int)(IDs[x+y*10]%100000/100)==0) {New = new ImageView(LyukImg);} else {New = new ImageView(UresMezoImg);} }break;
        			case 5:{ New = new ImageView(KapcsoloImg); }break;
        			default: { New = new ImageView(UresMezoImg); }break;
        		}
        		New.setFitWidth(CellWidth);
        		New.setFitHeight(ColumnHeight);
        		lowergridpane_preview.add(New, x, y);

        		ImageView New = new ImageView();
        		switch ((int)(IDs[x+y*Data.PalyaX]/10000000)) 
        		{
        			/*case 0:{  }break;
        			case 1:{ New = new ImageView(PlayerImgs.get(getRandomPlayerImg())); }break;
        			case 2:{ New = new ImageView(DobozImg); }break;
        			case 3:{ New = new ImageView(JeloltDImg); }break;*/
        		}
        		New.setFitWidth(CellWidth);
        		New.setFitHeight(ColumnHeight);
        		uppergridpane_preview.add(New, x, y);
        	}
    	}
    }
    
    private void disposeGrid() 
    {
    	lowergridpane_preview.getChildren().clear();
    	uppergridpane_preview.getChildren().clear();
    } 
    
    private int getRandomPlayerImg() 
    {    	
    	Random rand = new Random();
    	Integer res;
    	do {
    		res = rand.nextInt(21);
    	} while (usedplayers.contains(res));
    	
    	usedplayers.add(res);
    	return res;
    }
}