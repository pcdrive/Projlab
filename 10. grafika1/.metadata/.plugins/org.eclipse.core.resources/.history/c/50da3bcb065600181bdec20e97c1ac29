package controller;

import data.Data;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.RowConstraints;
import javafx.scene.text.Text;
import javafx.util.Duration;
import javafx.util.Pair;
import sokoban.Irany;
import sokoban.Navigator;
import sokoban.Pont;
import sokoban.Pontok;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

/**
 * A KillerSokoban egy jatek, ahol a jatekos egy raktari munkast alakit.
 * A cel, hogy minden mas jatekosnal tobb megjelolt ladat tolj a helyere.
 *
 * @author Horvath Gergo
 * @author Mocsari Andras
 * @author Zsiros Balint
 * @author Bottlik Judit
 * @author Holub Csongor
 * @version 1.0
 * @since 2018.04.29.
 */
public class GameController {

    @FXML
    public GridPane lowergridpane_preview;
    @FXML
    public GridPane uppergridpane_preview;
	@FXML
	public Button button_menu;
    @FXML
    public GridPane gridpane_pontok;

    private Image CelhelyImg;
    private Image DobozImg;
    private Image FalImg;
    private Image JeloltDImg;
    private Image KapcsoloImg;
    private Image LyukImg;
    private Image MezImg;
    private Image OlajImg;
    private Image MezOlajImg;
    private Image UresMezoImg;
    private ArrayList<Image> PlayerImgs = new ArrayList<Image>();
    private ArrayList<Pair<Integer, Integer>> usedplayers = new ArrayList<Pair<Integer, Integer>>();
    private Timeline interval;

    int TimerTick=0;
    public GameController() 
    {
        CelhelyImg = new Image("/data/resources/drawable/celhely.png");
        DobozImg = new Image("/data/resources/drawable/doboz.png");
        FalImg = new Image("/data/resources/drawable/fal.png");
        JeloltDImg = new Image("/data/resources/drawable/jeloltdoboz.png");
        KapcsoloImg = new Image("/data/resources/drawable/kapcsolo.png");
        LyukImg = new Image("/data/resources/drawable/lyuk.png");
        MezImg = new Image("/data/resources/drawable/mez.png");
        MezOlajImg = new Image("/data/resources/drawable/mezolaj.png");
        OlajImg = new Image("/data/resources/drawable/olaj.png");
        UresMezoImg = new Image("/data/resources/drawable/uresmezo.png");
        fillPlayerImages();
        
        EventHandler<ActionEvent> AEH = new EventHandler<ActionEvent>() { 
            @Override
            public void handle(ActionEvent event) {
            	TimerTick++;
            	System.out.println(Data.jatek.isAlive() + " " + (TimerTick));
            	
    	    	if (Data.jatek.isAlive() && Data.PalyaX!=0 && Data.PalyaY!=0 && Data.jatek.getData()!=null && Data.jatek.getData().pontok!=null) 
    	    	{
	    	    	disposeGrid();
	    	    	
	    	    	setGrid();
	    	    	
	    	    	fillGrid();
	    	    	fillPontGrid();
    	    	}
    	    	
    	    	if (!Data.jatek.isAlive()) 
    	    	{
    	        	interval.stop();    	        	

    	        	Pontok ptk = Data.jatek.getData().pontok;
    	        	
    	        	ArrayList<Pont> pontlist = new ArrayList<Pont>();
    	        	
    	        	pontlist.add(ptk.getPont(0));
    	        	
    	        	for(int i=1;i<ptk.getHossz();i++) 
    	        	{
    	        		int l=0;
    	        		while (pontlist.get(l).getPont() < ptk.getPont(i).getPont() && l<pontlist.size()) {}
    	        		pontlist.add(l, ptk.getPont(i));
    	        	}
    	        	
    	        	String res = "";
    	        	
    	        	for (Pont pont : pontlist) 
    	        	{
    	        		char[] chars = new char[30-pont.getNev().length()];
    	        		Arrays.fill(chars, ' ');
    	        		String s = new String(chars);
    	        		res += pont.getNev() + s + "\t" + pont.getPont()+"\n";
    	        	}
    	        	
    	        	Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("A játék véget ért!");
                    alert.setHeaderText(null);
                    alert.setContentText("A végső pontszámok:\n\n" + res);
                    alert.show();
                    
                    try {
                    	
                    	interval.stop();
                        Parent root = FXMLLoader.load(getClass().getResource("/data/resources/layout/MenuView.fxml"));
                        Navigator.navigate(root, false);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
    	    	}
    	        
            }};
        interval = new Timeline(new KeyFrame(Duration.millis(100), AEH));
        interval.setCycleCount(Timeline.INDEFINITE);
        interval.play();
    }
    
    public void onKeyPressed(KeyEvent event) 
    {    	
    	if (Data.szerver) 
    	{
	        switch (event.getCode()) 
	        {
	            case W: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.FEL, false); else Data.jatek.sendParancs(Irany.FEL);} break;
	            case A: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.BALRA, false); else Data.jatek.sendParancs(Irany.BALRA);} break; 
	            case S: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.LE, false); else Data.jatek.sendParancs(Irany.LE);} break; 
	            case D: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.JOBBRA, false); else Data.jatek.sendParancs(Irany.JOBBRA);} break; 
	            case Q: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.MEZ, false); else Data.jatek.sendParancs(Irany.MEZ);} break; 
	            case E: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.OLAJ, false); else Data.jatek.sendParancs(Irany.OLAJ);} break; 
	            case I: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.FEL, true);} break;
	            case J: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.BALRA, true);} break; 
	            case K: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.LE, true); } break; 
	            case L: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.JOBBRA, true); } break; 
	            case U: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.MEZ, true); } break; 
	            case O: { if (Data.szerver) Data.jatek.SzerverSendParancs(Irany.OLAJ, true);} break;
	            default: break;
	        }
        }
    	else 
    	{
	        switch (event.getCode()) 
	        {
	            case W: { if (Data.szerver) Data.jatek.sendParancs(Irany.FEL); 
	    		System.out.println(event.getCode());} break;
	            case A: { if (Data.szerver) Data.jatek.sendParancs(Irany.BALRA); } break; 
	            case S: { if (Data.szerver) Data.jatek.sendParancs(Irany.LE); } break; 
	            case D: { if (Data.szerver) Data.jatek.sendParancs(Irany.JOBBRA); } break; 
	            case Q: { if (Data.szerver) Data.jatek.sendParancs(Irany.MEZ); } break; 
	            case E: { if (Data.szerver) Data.jatek.sendParancs(Irany.OLAJ);} break;
	            default: break;
	        }
    	}
    }
    

    public void onVisszaButtonDownAction() {
        try {
        	
        	interval.stop();
        	
        	Data.jatek.exit();
            Parent root = FXMLLoader.load(getClass().getResource("/data/resources/layout/MenuView.fxml"));
            Navigator.navigate(root, false);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}   
    
    private void fillPlayerImages()
    {
    	if (PlayerImgs==null) 
    	{
    		PlayerImgs = new ArrayList<Image>();
    	}
    	
    	for (int i=0;i<21;i++) 
    	{
    		PlayerImgs.add(new Image("/data/resources/drawable/jatekosok/jo"+i+".png"));
    	}
    }
    
    private void setGrid() 
    {
    	for (int i=0;i<Data.PalyaX;i++) 
    	{
            ColumnConstraints col = new ColumnConstraints();
            lowergridpane_preview.getColumnConstraints().add(col);
            col = new ColumnConstraints();
            uppergridpane_preview.getColumnConstraints().add(col);
    	}

    	for (int i=0;i<Data.PalyaY;i++) 
    	{
    		RowConstraints row = new RowConstraints();
            lowergridpane_preview.getRowConstraints().add(row);
    		row = new RowConstraints();
            uppergridpane_preview.getRowConstraints().add(row);
    	}
    	if (Data.jatek.getData()!=null) 
    	{
    		Pontok ptk = Data.jatek.getData().pontok;
    		
    		gridpane_pontok.setMinHeight(ptk.getHossz()*20);
    		gridpane_pontok.setMaxHeight(ptk.getHossz()*20);
    		
        	for (int i=0;i<ptk.getHossz();i++) 
        	{
        		RowConstraints row = new RowConstraints();
        		gridpane_pontok.getRowConstraints().add(row);
        	}
    	}
    }
    
    private void fillGrid() 
    {
    	int[] IDs = Data.jatek.getData().palya;
    	if (IDs!=null) 
    	{
	    	for (int x=0; x<Data.PalyaX;x++) 
	    	{
	        	for (int y=0; y<Data.PalyaY;y++) 
	        	{
	        		ImageView New = new ImageView();
	        		int CellWidth = lowergridpane_preview.widthProperty().intValue()/Data.PalyaX;
	        		int ColumnHeight = lowergridpane_preview.heightProperty().intValue()/Data.PalyaY;
	        		
	        		switch ((int)(IDs[x+y*Data.PalyaX]%10000/1000)) 
	        		{
	        			case 0:{ New = new ImageView(UresMezoImg); }break;
	        			case 1:{ New = new ImageView(FalImg); }break;
	        			case 2:{ New = new ImageView(LyukImg); }break;
	        			case 3:{ if ((int)(IDs[x+y*10]%100000/100)==0) {New = new ImageView(CelhelyImg);} else {New = new ImageView(UresMezoImg);} }break;
	        			case 4:{ if ((int)(IDs[x+y*10]%100000/100)==0) {New = new ImageView(LyukImg);} else {New = new ImageView(UresMezoImg);} }break;
	        			case 5:{ New = new ImageView(KapcsoloImg); }break;
	        			default: { New = new ImageView(UresMezoImg); }break;
	        		}
	        		New.setFitWidth(CellWidth);
	        		New.setFitHeight(ColumnHeight);
	        		lowergridpane_preview.add(New, x, y);
	
	        		New = new ImageView();
	        		switch ((int)(IDs[x+y*Data.PalyaX]/10000000)) 
	        		{
	        			case 0:{  }break;
	        			case 1:{ New = new ImageView(PlayerImgs.get(getRandomPlayerImg(IDs[x+y*Data.PalyaX]))); }break;
	        			case 2:{ New = new ImageView(DobozImg); }break;
	        			case 3:{ New = new ImageView(JeloltDImg); }break;
	        		}
	        		New.setFitWidth(CellWidth);
	        		New.setFitHeight(ColumnHeight);
	        		uppergridpane_preview.add(New, x, y);
	        	}
	    	}
	    }
    }
    
    private void fillPontGrid()
    {
    	Pontok ptk = Data.jatek.getData().pontok;
    	
    	for (int i=0;i<ptk.getHossz();i++) 
    	{
    		Pont pont = ptk.getPont(i);
    		Text nev = new Text(pont.getNev());
    		Text pontsz = new Text(pont.getPont()+"");
    		gridpane_pontok.add(nev, 0, i);
    		gridpane_pontok.add(pontsz, 1, i);
    	}    	
    }
    
    private void disposeGrid() 
    {
    	lowergridpane_preview.getChildren().clear();
    	uppergridpane_preview.getChildren().clear();
    	gridpane_pontok.getChildren().clear();
    } 
    
    private int getRandomPlayerImg(int ID) 
    {    	
    	int PLID=ID%1000000/100000;
    	
    	for (Pair<Integer, Integer> pair : usedplayers) 
    	{
    		if (pair.getKey()==PLID)
    			return pair.getValue();
    	}
    	
    	Random rand = new Random();
    	Integer res;
    	do {
    		res = rand.nextInt(21);
    	} while (usedplayers.contains(new Pair<Integer, Integer>(PLID, res)));
    	
    	usedplayers.add(new Pair<Integer, Integer>(PLID, res));
    	return res;
    }
}
