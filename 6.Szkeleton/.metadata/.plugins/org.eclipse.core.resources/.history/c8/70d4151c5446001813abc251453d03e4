/**
 * A KillerSokoban egy jatek, ahol a jatekos egy raktari munkast alakit.
 * A cel, hogy minden mas jatekosnal tobb megjelolt ladat tolj a helyere.
 *
 * @author Horvath Gergo
 * @author Mocsari Andras
 * @author Zsiros Balint
 * @author Bottlik Judit
 * @author Holub Csongor
 * @version 1.0
 * @since 2018-02-09
 */


package sokoban;

import Tools.Printer;
import data.Data;
import server.KliensAdat;
import server.PalyaAdat;
import server.Szerver;
import sokoban.leptethetok.Doboz;
import sokoban.leptethetok.Jatekos;
import sokoban.leptethetok.JeloltDoboz;
import sokoban.mezok.*;

import java.util.LinkedList;

@SuppressWarnings("unused")

public class Palya {
	
    private Szerver szerver;
    private UresMezo mezok[];
    private Pontok pontok;
    private LinkedList<Doboz> dobozok;
    private LinkedList<Jatekos> jatekosok;

    /**
     * Az osztaly konstruktora. Letrehozza a pontok osztalyt, es beallitja a jatekot.
     * 
     * @param s	Szerver referencaja.
     * @param pa	PalyaAdat ami alapja a palyat fel kell epiteni.
     * @param nevek	A jatekosok neveinek listaja.
     */
    public Palya(Szerver s, PalyaAdat pa, String[] nevek) {
        szerver = s;
        pontok = new Pontok();
        dobozok = new LinkedList<Doboz>();
        jatekosok = new LinkedList<Jatekos>();
        mezok = new UresMezo[pa.palya.length];

        int num = 0;

        for (int i = 0; i < mezok.length; i++) {
            switch (pa.palya[i] / 1000 % 100) {
                case 0:
                    mezok[i] = new UresMezo();
                    break;
                case 1:
                    mezok[i] = new Fal();
                    break;
                case 2:
                    mezok[i] = new Lyuk();
                    break;
                case 3:
                    mezok[i] = new Celhely();
                    break;
                case 4:
                    mezok[i] = new Csapdaajto();
                    break;
                case 5:
                    mezok[i] = new Kapcsolo();
                    break;
            }

            if (i > 1) {
                mezok[i - 1].SetSzomszed(Irany.JOBBRA, mezok[i]);
                mezok[i].SetSzomszed(Irany.BALRA, mezok[i - 1]);
            }
            if (i > Data.PalyaX) {
                mezok[i - Data.PalyaX].SetSzomszed(Irany.LE, mezok[i]);
                mezok[i].SetSzomszed(Irany.FEL, mezok[i - Data.PalyaX]);
            }

            switch ((int) (pa.palya[i] / 10000000)) {
                case 1: {
                    if (nevek.length != num) {
                        Jatekos jatekos = new Jatekos(nevek[num++], this, mezok[i]);
                        mezok[i].Fogad(0, null, jatekos, null);
                        jatekosok.add(jatekos);
                        pontok.AddJatekos(jatekos.getNev());
                    }
                }
                break;
                case 2: {
                    Doboz doboz = new Doboz(this, mezok[i]);
                    mezok[i].Fogad(0, null, doboz, null);
                    dobozok.add(doboz);
                }
                break;
                case 3: {
                    JeloltDoboz doboz = new JeloltDoboz(this, mezok[i]);
                    mezok[i].Fogad(0, null, doboz, null);
                    dobozok.add(doboz);
                }
                break;
            }
        }

        if (pa.csapdak != null) {
            System.out.print("Kapcsolo, csapdaajto osszerendelesek");
            Kapcsolo kapcsolo = null;
            for (int i = 0; i < pa.csapdak.length; i++) {
                int y = pa.csapdak[i] / Data.PalyaX;
                if (mezok[pa.csapdak[i]].getID() / 1000 % 100 == 5) {
                    kapcsolo = (Kapcsolo) mezok[pa.csapdak[i]];
                    System.out.println();
                    System.out.print("[" + (pa.csapdak[i] + 1 - y * Data.PalyaX) + ";" + (y + 1) + "]: ");
                } else if (mezok[pa.csapdak[i]].getID() / 1000 % 100 == 4) {
                    kapcsolo.AddCsapda((Csapdaajto) mezok[pa.csapdak[i]]);
                    System.out.print("[" + (pa.csapdak[i] + 1 - y * Data.PalyaX) + ";" + (y + 1) + "];");
                }
            }
        }
        System.out.println();

        Printer.EnablePrint();
        szerver.SendAdat(new KliensAdat(getInts(), pontok, Data.PalyaX, Data.PalyaY));
    }

    /**
     * Osszegyujti a palya mezoinek ID azonositoit egy tombbe.
     * 
     * @return int[]	Az azonositok tombje.
     */
    private int[] getInts() {
        int[] res = new int[mezok.length];
        for (int i = 0; i < Data.PalyaX * Data.PalyaY; i++) {
            res[i] = mezok[i].getID();
        }
        return res;
    }

    /**
     * A jatekos lepeset inditja el.
     *
     * @param i   Irany amerre lepni akarunk
     * @param nev A jatekos neve, azonositoja, akit leptetni akarunk.
     */
    public void Leptet(Irany i, String nev) {
        Printer.PrintTabIn("Palya" + '\t' + "Leptet(Irany, String)");

        for (Jatekos j : jatekosok) {
            if (j.getNev().equals(nev)) {
                j.Lepes(i);
            }
        }
        Printer.PrintTabOut("Return");

        szerver.SendAdat(new KliensAdat(getInts(), pontok, Data.PalyaX, Data.PalyaY));
    }

    /**
     * A jatekost torli a listabol.
     *
     * @param j A jatekos akinek meg kell halnia.
     */
    public void Halal(Jatekos j) {
        Printer.PrintTabIn("Palya" + '\t' + "Halal(Jatekos)");

        jatekosok.remove(j);
        Printer.PrintTabOut("Return");
    }

    /**
     * A dobozt torli a listabol.
     *
     * @param d A doboz akinek meg kell halnia.
     */
    public void Halal(Doboz d) {
        Printer.PrintTabIn("Palya" + '\t' + "Halal(Doboz)");
        dobozok.remove(d);
        Printer.PrintTabOut("Return");
    }

    /**
     * A jatekos pontszerzeset kezeli. Ez tovabbhivja pontok osztaj pontot kap
     * metodusat.
     *
     * @param j A jatekos aki a pontot kapja.
     */
    public void PontotKap(Jatekos j) {
        Printer.PrintTabIn("Palya" + '\t' + "PontotKap(Jatekos)");
        pontok.PontotKap(j.getNev());
        Printer.PrintTabOut("Return");
    }

    /**
     * Vegignezi a dobozokat, es ellenorzi a jatek veget.
     */
    public void Vegellenorzes() {
        Printer.PrintTabIn("Palya" + '\t' + "Vegellenorzes()");

        for (Doboz d : dobozok) {
            boolean mozgathato = d.Vege();
            if (mozgathato) {
                Printer.PrintTabOut("Return");
                return;
            }
        }

//        jatek.EndGame();
        Printer.PrintTabOut("Return");
        return;
    }

}
