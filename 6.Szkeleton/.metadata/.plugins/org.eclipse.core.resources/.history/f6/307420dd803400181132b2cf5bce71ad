/**
 * A KillerSokoban egy jatek, ahol a jatekos egy raktari munkast alakit.
 * A cel, hogy minden mas jatekosnal tobb megjelolt ladat tolj a helyere.
 *
 * @author Horvath Gergo
 * @author Mocsari Andras
 * @author Zsiros Balint
 * @author Bottlik Judit
 * @author Holub Csongor
 * @version 1.0
 * @since 2018-02-09
 */


package sokoban.leptethetok;

import Tools.Printer;
import sokoban.Irany;
import sokoban.Palya;
import sokoban.mezok.UresMezo;

public class JeloltDoboz extends Doboz {
    private boolean jel;


    /**
     * Az osztaly konstruktora. Beallitja a jelet, palyat es a mezot.
     *
     * @param p A palya.
     * @param m A mezo, amin all.
     */
    public JeloltDoboz(Palya p, UresMezo m) {
        super(p, m);
        jel = true;
    }

    /**
     * Torli a doboz jeloleset, a boolean ertek megveltoztatasaval.
     */
    public void JeletTorol() {
        Printer.PrintTabIn("JeloltDoboz" + '\t' + "JeletTorol()");
        jel = false;
        Printer.PrintTabOut("Return");
    }

    /**
     * Lekeri a jel erteket.
     *
     * @return boolean A jel erteke.
     */
    public boolean getJel() {
        Printer.PrintTabIn("JeloltDoboz" + '\t' + "getJel()");
        Printer.PrintTabOut("Return " + Boolean.toString(jel));
        return jel;
    }

    /**
     * Az objektumot egy jatekos tolta meg, �s az ezzel valo interakciot kezeli.
     *
     * @param ero  az ero amivel a jatekos a sort megtolta.
     * @param surl A mezo surlodasa, amin all.
     * @param i    Irany amerre a dobozt tolt�k
     * @param j    Jatekos, aki tol�st kezdte
     * @return boolean Annak az erteke, hogy a doboz tolhato-e.
     */
    @Override
    public boolean Tol(float ero, float surl, Irany i, Jatekos j) {

        Printer.PrintTabIn("JeloltDoboz" + '\t' + "Tol(float, float, Irany, Jatekos)");

        if (ero - surl * tapadas > 0) {


            UresMezo szom = mezo.GetSzomszed(i);
            boolean success = szom.Fogad(ero - surl * tapadas, i, this, j);
            if (success)
            {
                mezo.Enged();
                mezo=szom;
            }
            Printer.PrintTabOut("Return: " + Boolean.toString(success));
            return success;
        }

        Printer.PrintTabOut("Return: " + Boolean.toString(false));
        return false;
    }

    /**
     * Az objektumot egy doboz tolta meg, �s az ezzel valo interakciot kezeli.
     *
     * @param ero  az ero amivel a jatekos a sort megtolta.
     * @param surl A mezo surlodasa, amin all.
     * @param i    Irany amerre a dobozt tolt�k
     * @param j    Jatekos, aki tol�st kezdte
     * @return boolean Annak az erteke, hogy a doboz tolhato-e.
     */
    @Override
    public boolean Utkozik(float ero, float surl, Irany i, Jatekos j) {

        Printer.PrintTabIn("JeloltDoboz" + '\t' + "Utkozik(float, float, Irany, Jatekos)");

        if (ero - surl * tapadas > 0) {

            boolean success = mezo.GetSzomszed(i).Fogad(ero - surl * tapadas, i, this, j);
            if (success)
                mezo.Enged();
            Printer.PrintTabOut("Return: " + Boolean.toString(success));
            return success;
        }

        Printer.PrintTabOut("Return: " + Boolean.toString(false));
        return false;
    }

    @Override
    public int getTipus() {
        return 3;
    }

    @Override
    public int getStatus() {
        return jel ? 1 : 0;
    }
}
